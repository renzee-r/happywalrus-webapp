{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rj421\\\\Workspace\\\\w210\\\\project-app\\\\src\\\\modules\\\\Upload.js\";\nimport React, { Component } from 'react';\nimport { Button, Container, CssBaseline, Grid, Typography, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@material-ui/core';\nimport { BrowserRouter as Router, Switch, Route, Link as RouterLink } from \"react-router-dom\";\nimport Publish from '@material-ui/icons/Publish';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n  root: {\n    // backgroundColor: '#fde3a7',\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'center',\n    height: '90vh',\n    minHeight: 500,\n    maxHeight: 1300\n  },\n  container: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(14),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  gridItemButton: {\n    paddingTop: 20\n  },\n  button: {\n    fontSize: 20\n  },\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  image: {\n    height: 150\n  }\n});\n\nconst RefLink = React.forwardRef((props, ref) => React.createElement(RouterLink, Object.assign({\n  innerRef: ref\n}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 44\n  },\n  __self: this\n})));\n\nclass Upload extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClickOpen = this.handleClickOpen.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleImageClick = this.handleImageClick.bind(this);\n    this.state = {\n      isOpen: false\n    };\n    this.imageRef = React.createRef();\n  }\n\n  handleClickOpen() {\n    this.setState(state => ({\n      isOpen: true\n    }));\n  }\n\n  handleClose() {\n    this.setState(state => ({\n      isOpen: false\n    }));\n  }\n\n  handleImageClick(e, data) {\n    console.log(this.imageRef);\n    this.imageRef.current.style.border = 'none';\n    e.target.style.border = 'solid';\n  }\n\n  render() {\n    const classes = this.props.classes;\n    return (// Guidelines for ideal image quality/characteristics\n      // Dialog options for user provided features\n      React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(CssBaseline, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), React.createElement(\"section\", {\n        className: classes.root,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(Container, {\n        className: classes.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        justify: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        md: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        md: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        align: \"left\",\n        variant: \"h4\",\n        color: \"textPrimary\",\n        gutterBottom: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Step 1: Take a picture of the room/space you would like to babyproof\")), React.createElement(Grid, {\n        item: true,\n        md: 9,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        align: \"left\",\n        variant: \"h4\",\n        color: \"textPrimary\",\n        gutterBottom: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"Step 2: Upload it to HappyWalrus\"))), React.createElement(Grid, {\n        item: true,\n        md: 12,\n        align: \"center\",\n        className: classes.gridItemButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        size: \"large\",\n        onClick: this.handleClickOpen,\n        className: classes.button,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(Publish, {\n        fontSize: \"large\",\n        className: classes.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }), \"Upload\"))))), React.createElement(Dialog, {\n        fullWidth: true,\n        maxWidth: 'md',\n        open: this.state.isOpen,\n        onClose: this.handleClose,\n        \"aria-labelledby\": \"dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(DialogTitle, {\n        id: \"dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"Select an Image to Upload...\"), React.createElement(DialogContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(Container, {\n        maxwidth: \"sm\",\n        className: classes.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        justify: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        sm: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: \"image-placeholder.jpg\",\n        alt: \"upload-img\",\n        className: classes.image,\n        ref: this.imageRef,\n        onClick: this.handleImageClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      })), React.createElement(Grid, {\n        sm: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: \"image-placeholder.jpg\",\n        alt: \"upload-img\",\n        className: classes.image,\n        ref: this.imageRef,\n        onClick: this.handleImageClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      })), React.createElement(Grid, {\n        sm: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: \"image-placeholder.jpg\",\n        alt: \"upload-img\",\n        className: classes.image,\n        ref: this.imageRef,\n        onClick: this.handleImageClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }))))), React.createElement(DialogActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.handleClose,\n        color: \"secondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \"Cancel\"), React.createElement(Button, {\n        component: RefLink,\n        to: \"/analyzing\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, \"Confirm\"))))\n    );\n  }\n\n}\n\nexport default withStyles(styles)(Upload);","map":{"version":3,"sources":["C:\\Users\\rj421\\Workspace\\w210\\project-app\\src\\modules\\Upload.js"],"names":["React","Component","Button","Container","CssBaseline","Grid","Typography","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","BrowserRouter","Router","Switch","Route","Link","RouterLink","Publish","withStyles","styles","theme","root","position","display","alignItems","height","minHeight","maxHeight","container","marginTop","spacing","marginBottom","flexDirection","gridItemButton","paddingTop","button","fontSize","icon","marginRight","image","RefLink","forwardRef","props","ref","Upload","constructor","handleClickOpen","bind","handleClose","handleImageClick","state","isOpen","imageRef","createRef","setState","e","data","console","log","current","style","border","target","render","classes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n    Button, Container, CssBaseline, Grid, Typography, \r\n    Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions\r\n} from '@material-ui/core';\r\nimport { \r\n    BrowserRouter as Router, Switch, Route, Link as RouterLink \r\n} from \"react-router-dom\";\r\nimport Publish from '@material-ui/icons/Publish';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        // backgroundColor: '#fde3a7',\r\n        position: 'relative',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        height: '90vh',\r\n        minHeight: 500,\r\n        maxHeight: 1300,\r\n    },\r\n    container: {\r\n        marginTop: theme.spacing(3),\r\n        marginBottom: theme.spacing(14),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    gridItemButton: {\r\n        paddingTop: 20,\r\n    },\r\n    button: {\r\n        fontSize: 20,\r\n    },\r\n    icon: {\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    image: {\r\n        height: 150,\r\n    }\r\n});\r\n\r\nconst RefLink = React.forwardRef((props, ref) => <RouterLink innerRef={ref} {...props} />);\r\n\r\nclass Upload extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleClickOpen = this.handleClickOpen.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.handleImageClick = this.handleImageClick.bind(this);\r\n\r\n        this.state = {isOpen: false};\r\n        this.imageRef = React.createRef();\r\n    }\r\n\r\n    handleClickOpen() {\r\n        this.setState(state => ({\r\n            isOpen: true\r\n        }));\r\n    }\r\n\r\n    handleClose() {\r\n        this.setState(state => ({\r\n            isOpen: false\r\n        }));\r\n    }\r\n\r\n    handleImageClick(e, data) {\r\n        console.log(this.imageRef);\r\n        this.imageRef.current.style.border = 'none';\r\n        e.target.style.border = 'solid';\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            // Guidelines for ideal image quality/characteristics\r\n            // Dialog options for user provided features\r\n\r\n            <React.Fragment>\r\n                <CssBaseline />\r\n\r\n                <section className={classes.root}>\r\n                    <Container className={classes.container}>\r\n                        <Grid container justify=\"center\">\r\n                            <Grid item md={12}>\r\n                                <Grid item md={3}>\r\n                                    <Typography align=\"left\" variant=\"h4\" color=\"textPrimary\" gutterBottom> \r\n                                        Step 1: Take a picture of the room/space you would like to babyproof\r\n                                    </Typography>\r\n                                </Grid>\r\n\r\n                                <Grid item md={9}>\r\n                                    <Typography align=\"left\" variant=\"h4\" color=\"textPrimary\" gutterBottom> \r\n                                        Step 2: Upload it to HappyWalrus\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid item md={12} align=\"center\" className={classes.gridItemButton}>\r\n                                <Button variant=\"contained\" color=\"primary\" size=\"large\" onClick={this.handleClickOpen} className={classes.button}>\r\n                                    <Publish fontSize=\"large\" className={classes.icon}/>\r\n                                    Upload\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Container>\r\n                </section>\r\n\r\n                <Dialog\r\n                    fullWidth={true}\r\n                    maxWidth={'md'}\r\n                    open={this.state.isOpen}\r\n                    onClose={this.handleClose}\r\n                    aria-labelledby=\"dialog-title\"\r\n                >\r\n                    <DialogTitle id=\"dialog-title\">Select an Image to Upload...</DialogTitle>\r\n\r\n                    <DialogContent>\r\n                        <Container maxwidth=\"sm\" className={classes.container}>\r\n                            <Grid container justify=\"center\">\r\n                                <Grid sm={4}>\r\n                                    <img\r\n                                        src=\"image-placeholder.jpg\"\r\n                                        alt=\"upload-img\"\r\n                                        className={classes.image}\r\n                                        ref={this.imageRef}\r\n                                        onClick={this.handleImageClick}\r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid sm={4}>\r\n                                    <img\r\n                                        src=\"image-placeholder.jpg\"\r\n                                        alt=\"upload-img\"\r\n                                        className={classes.image}\r\n                                        ref={this.imageRef}\r\n                                        onClick={this.handleImageClick}\r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid sm={4}>\r\n                                    <img\r\n                                        src=\"image-placeholder.jpg\"\r\n                                        alt=\"upload-img\"\r\n                                        className={classes.image}\r\n                                        ref={this.imageRef}\r\n                                        onClick={this.handleImageClick}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Container>\r\n\r\n                    </DialogContent>\r\n\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleClose} color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n\r\n                        <Button component={RefLink} to=\"/analyzing\" color=\"primary\">\r\n                            Confirm\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n   \r\n}\r\n\r\nexport default withStyles(styles)(Upload)"]},"metadata":{},"sourceType":"module"}